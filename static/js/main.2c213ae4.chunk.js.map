{"version":3,"sources":["components/Cards/Cards.js","components/Chart/Chart.js","api/index.js","components/CountryPicker/CountryPicker.js","App.js","index.js"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","className","Grid","container","spacing","justify","item","component","Card","xs","md","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","Chart","dailyData","PieChartConfig","labels","datasets","label","backgroundColor","hoverBackgroundColor","summaryValue","multiplier","parseInt","length","push","i","lineChart","map","date","fill","lineTension","borderColor","borderWidth","options","title","display","text","fontSize","legend","position","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","total","reportDate","fetchCountries","countries","name","CountryPicker","handleCountry","useState","fetchedCountries","setFetchedCountries","useEffect","fetchAPI","FormControl","NativeSelect","defaultValue","onChange","e","target","App","setData","currentCountry","setCurrentCountry","setDailyData","selectedCountry","fetchedData","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c213ae4.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Cards.css\"\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup'\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n\n    if (!confirmed) {\n        return 'Loading';\n    }\n    return (\n        <div className=\"card-container\">\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={\"card infected\"}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h6\">\n                            <CountUp\n                                start={0}\n                                end={confirmed.value}\n                                duration={1}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of confirmed cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n\n                <Grid item component={Card} xs={12} md={3} className={\"card recovered\"}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h6\">\n                            <CountUp\n                                start={0}\n                                end={recovered.value}\n                                duration={1}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of recovered cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n\n                <Grid item component={Card} xs={12} md={3} className={\"card death\"}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Death</Typography>\n                        <Typography variant=\"h6\">\n                            <CountUp\n                                start={0}\n                                end={deaths.value}\n                                duration={1}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of death cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards;","import React from 'react';\nimport { Pie, Line, Bar } from 'react-chartjs-2';\n\nimport './Chart.css'\n\nconst Chart = ({ data: { confirmed, recovered, deaths, lastUpdate }, dailyData }) => {\n\n    if (!confirmed) {\n        return \"loading\";\n    }\n    const PieChartConfig = {\n        labels: ['Confirmed', 'Recoverd', 'Deaths'],\n        datasets: [\n            {\n                label: 'Covid-19',\n                backgroundColor: [\n                    'rgba(255,0,0, 0.5)',\n                    'rgba(0,255,0, 0.5)',\n                    'rgba(0,0,255, 0.5)',\n                ],\n                hoverBackgroundColor: [\n                    'rgba(255,0,0, 0.5)',\n                    'rgba(0,255,0, 0.5)',\n                    'rgba(0,0,255, 0.5)',\n                ],\n                data: [confirmed.value, recovered.value, deaths.value]\n            }\n        ]\n    }\n    const summaryValue = []\n    const multiplier = parseInt((dailyData.length) / 20)\n    summaryValue.push(dailyData[0])\n    for (let i = 1; i < 20; i++) {\n        summaryValue.push(dailyData[i * multiplier])\n    }\n    summaryValue.push(dailyData[dailyData.length - 1])\n\n\n    const lineChart = (\n        summaryValue[0] ? (\n            <Line\n                data={{\n                    labels: summaryValue.map(({ date }) => date),\n                    datasets: [{\n                        data: summaryValue.map(({ confirmed }) => confirmed),\n                        label: 'Infected',\n                        fill: false,\n                        lineTension: 0.5,\n                        backgroundColor: 'rgba(255,0,0, 0.5);',\n                        borderColor: 'rgba(255,0,0, 0.5)',\n                        color: 'rgba(255,0,0, 0.5)',\n                        borderWidth: 2,\n                    },\n                    {\n                        data: summaryValue.map(({ deaths }) => deaths),\n                        label: 'Deaths',\n                        lineTension: 0.5,\n                        borderColor: 'rgba(0,0,255, 0.5)',\n                        backgroundColor: '',\n                        borderWidth: 2,\n                        fill: false,\n                    }\n                    ],\n                }}\n            />) : null\n    );\n\n\n    return (\n        <div className=\"chart-container\">\n            <div className=\"pie\">\n                <Pie\n                    data={PieChartConfig}\n                    options={{\n                        title: {\n                            display: false,\n                            text: '',\n                            fontSize: 20\n                        },\n                        legend: {\n                            display: true,\n                            position: 'right'\n                        }\n                    }}\n                />\n            </div>\n            <div className=\"bar\">\n                <Bar\n                    data={PieChartConfig}\n                    options={{\n                        title: {\n                            display: false,\n                            text: 'Average Rainfall per month',\n                            fontSize: 20\n                        },\n                        legend: {\n                            display: false,\n                            position: 'right'\n                        }\n                    }}\n                />\n            </div>\n            <div className=\"lineChart\">\n                <p>Global Confirmed and Deaths Cases Vs Dates</p>\n                {lineChart}\n            </div>\n        </div>\n    )\n\n}\n\nexport default Chart;","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n    let changeableUrl = url;\n\n    if (country) {\n        changeableUrl = `${url}/countries/${country}`\n    }\n    try {\n        const { data : { confirmed, recovered, deaths, lastUpdate} } = await axios.get(changeableUrl);\n        \n        return { confirmed, recovered, deaths, lastUpdate}\n\n    } catch (err) {\n        console.log(err)\n    }\n\n}\n\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate\n        }))\n\n        return modifiedData;\n    } catch(err) {\n        console.log(err)\n    }\n}\n\nexport const fetchCountries = async () => {\n    try {  \n        const { data: {countries} } = await axios.get(`${url}/countries`)\n\n        return countries.map((country) => country.name)\n    } catch(err) {\n        console.log(err)\n    }\n}\n","import React, { useState, useEffect } from 'react';\nimport { FormControl, NativeSelect } from '@material-ui/core'\nimport './CountryPicker.css'\nimport { fetchCountries } from '../../api/index'\n\nconst CountryPicker = ({ handleCountry }) => {\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries());\n        }\n\n        fetchAPI();\n    }, [fetchedCountries])\n    return (\n        <div className=\"country-container\">\n            <FormControl className=\"formControl\">\n\n\n\n                <NativeSelect defaultValue=\"\" onChange={(e) => handleCountry(e.target.value)}>\n                    <option value=\"\">\n                        Global\n                </option>\n                    {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n                </NativeSelect>\n            </FormControl>\n        </div>\n    )\n}\n\nexport default CountryPicker;","import React, { useEffect, useState } from 'react';\nimport Cards from './components/Cards/Cards'\nimport Chart from './components/Chart/Chart'\nimport CountryPicker from './components/CountryPicker/CountryPicker'\nimport './App.css'\nimport { fetchData } from './api/index';\nimport { fetchDailyData } from './api/index';\n\nconst App = () => {\n    const [data, setData] = useState({});\n    const [currentCountry, setCurrentCountry] = useState('');\n    const [dailyData, setDailyData] = useState([])\n\n    const handleCountry = async (selectedCountry) => {\n        setCurrentCountry(currentCountry)\n        const fetchedData = await fetchData(selectedCountry);\n        setData(fetchedData)\n    }\n\n    useEffect(() => {\n        handleCountry();\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n        fetchAPI();\n    }, []);\n\n    return (\n        <div className=\"container\">\n            <p>Coronavirus (COVID-19) Dashboard</p>\n            <CountryPicker handleCountry={handleCountry} />\n            <Cards data={data} />\n            <Chart data={data} country={currentCountry} dailyData={dailyData} />\n        </div>\n    )\n}\n\nexport default App","import React from 'react';\nimport ReactDom from 'react-dom';\n\nimport App from './App';\n\nReactDom.render(<App />, document.getElementById('root'));"],"sourceRoot":""}